let mockJson =
  {|{
  "store": {
    "books": [
      {
        "category": "reference",
        "author": "Nigel Rees",
        "title": "Sayings of the Century",
        "price": 8.95
      },
      {
        "category": "fiction",
        "author": "Evelyn Waugh",
        "title": "Sword of Honour",
        "price": 12.99
      },
      {
        "category": "fiction",
        "author": "Herman Melville",
        "title": "Moby Dick",
        "isbn": "0-553-21311-3",
        "price": 8.99
      },
      {
        "category": "fiction",
        "author": "J. R. R. Tolkien",
        "title": "The Lord of the Rings",
        "isbn": "0-395-19395-8",
        "price": 22.99
      }
    ]
  }
}
|}

let page = "flex flex-col items-center h-full bg-zinc-900"

let container =
  "w-3/4 max-w-full h-full mx-auto flex flex-col justify-between items-center"

let columnHalf =
  "w-1/2 h-full mx-auto flex flex-col justify-between items-left gap-2"

let box = "bg-gray-800 h-full w-full border-2 border-gray-700 rounded-md"

type t = { query : string; json : string option }
type actions = UpdateQuery of string | UpdateJson of string

let reduce state = function
  | UpdateQuery query -> { state with query }
  | UpdateJson json -> { state with json = Some json }

module QueryParams = struct
  open Melange_json.Primitives

  type t = { query : string; json : string option } [@@deriving json]

  let decode json = of_json json
  let encode t = to_json t
  let toString t = t |> encode |> Melange_json.to_string
  let fromString str = str |> Melange_json.of_string |> decode
  let toHash state = state |> toString |> Base64.encode
end

module Option = struct
  include Option

  (* Option.bind with pipe-last friendly *)
  let bind f o = match o with None -> None | Some v -> f v
end

module QueryJson = struct
  type js_of_ocaml_result = {
    first : int; [@mel.as "0"]
    second : string; [@mel.as "1"]
  }

  let to_result (res : js_of_ocaml_result) =
    match res.first with
    | 0 -> Ok res.second
    | 1 -> Error res.second
    | _ -> Error "Invalid result from QueryJsonJs"

  let query_json_run : string -> string -> js_of_ocaml_result =
    [%mel.raw
      {|
    function (query, json) {
      return window['query-json'].run(query, json);
    }|}]

  let run query json = to_result (query_json_run query json)
end

let[@react.component] make () =
  let hash = Router.get_hash () in

  let stateFromHash =
    hash |> Option.bind Base64.decode |> Option.map QueryParams.fromString
  in

  let initialState =
    match stateFromHash with
    | Some { query; json } -> { query; json }
    | None -> { query = ""; json = Some mockJson }
  in

  let state, dispatch = React.useReducer reduce initialState in

  let onQueryChange value = dispatch (UpdateQuery value) in
  let onJsonChange value = dispatch (UpdateJson value) in

  let output =
    match (state.json, state.query) with
    | Some _, "" | None, _ -> None
    | Some json, _ -> Some (QueryJson.run state.query json)
  in

  let onShareClick _ =
    let hash = QueryParams.toHash { query = state.query; json = state.json } in
    match hash with
    | Some hash -> Router.set_hash hash
    | None -> Printf.eprintf "Error decoding"
  in

  (* const downloadJson = () => {
       const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(activeTab === "input" ? jsonInput : result)
       const downloadAnchorNode = document.createElement("a")
       downloadAnchorNode.setAttribute("href", dataStr)
       downloadAnchorNode.setAttribute("download", `json-playground-${activeTab === "input" ? "input" : "result"}.json`)
       document.body.appendChild(downloadAnchorNode)
       downloadAnchorNode.click()
       downloadAnchorNode.remove()
     } *)
  <div className=page>
    <Header onShareClick />
    <div className="w-full mb-2" />
    <div className=container>
      <div className="w-full mb-2">
        <TextInput value=state.query
                   onChange=onQueryChange
                   placeholder="Type the query to filter against the JSON \
                                below. For example: '.store'" />
      </div>
      <div className="w-full h-full mx-auto flex justify-between items-center \
                      gap-2">
        <div className=columnHalf>
          <span className="text-white text-xs">
            (React.string "Input JSON")
          </span>
          <Editor.Json value=(Option.value state.json ~default:"")
                       onChange=onJsonChange />
        </div>
        <div className=columnHalf>
          <span className="text-white text-xs">(React.string "Output")</span>
          (match output with
          | Some value -> <Editor.Output value />
          | None -> <Editor.Empty />)
        </div>
      </div>
    </div>
  </div>
